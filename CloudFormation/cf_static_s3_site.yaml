AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DomainName:
    Description: The FQ domain name for the site
    Type: String
  R53ZoneId:
    Description: The Route53 Zone Id
    Type: AWS::Route53::HostedZone::Id
  GitHubRepositoryId:
    Description: "The GitHub Repo Id (typically everything following https://github.com/ in the repo url)"
    Type: String
  DevicePoolArn:
    Description: "The device pool ARN to leverage for website testing (must be Web)"
    Type: String
Resources:
  SiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-site-bucket'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  CloudfrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: S3 Access Identity for the site

  SiteS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SiteS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join ['',[!GetAtt SiteS3Bucket.Arn,'/*']]
            Principal: 
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudfrontOriginAccessIdentity}'
  
  ACMCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref R53ZoneId
      ValidationMethod: DNS 

  RequestProcessingFunction:
    Type: AWS::CloudFront::Function
    Properties: 
      Name: !Sub "${AWS::StackName}-RequestHandler"
      FunctionConfig: 
        Comment: Request processing CF Function
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;
          var uri = request.uri;
          var version = 'live';
            
          if (headers['app-version']) version = headers['app-version'].value;

          if(uri.endsWith('/') || uri.endsWith('/about') || uri.endsWith('/contact')) request.uri = '/' + version + '/index.html';
          else request.uri = '/' + version + uri;

          console.log("new uri: " + request.uri);
          return request;
        }
  
  ResponseProcessingFunction:
    Type: AWS::CloudFront::Function
    Properties: 
      Name:  !Sub "${AWS::StackName}-ResponseHandler"
      FunctionConfig: 
        Comment: Response processing CF Function
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          var response = event.response;
          var request = event.request;
          var headers = response.headers;
            
          // Set the environment header
          if(request.uri.startsWith('/test')) headers['site-version'] = {value: 'test'};   

          return response;
        }

  CloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              !GetAtt SiteS3Bucket.DomainName
            Id: !Sub '${DomainName}.s3Origin'
            S3OriginConfig:
              OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CloudfrontOriginAccessIdentity ] ]
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: !Sub '${DomainName}.s3Origin'
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RequestProcessingFunction.FunctionARN
            - EventType: viewer-response
              FunctionARN: !GetAtt ResponseProcessingFunction.FunctionARN
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        Enabled: true
        HttpVersion: http2
  
  SiteIPv4DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref R53ZoneId
      Comment: DNS record for the site.
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistro.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  
  SiteIPv6DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref R53ZoneId
      Comment: DNS record for the site.
      Name: !Ref DomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistro.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  
  
  WebsiteDeployCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-WebsiteCodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "codebuild.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /service-role/
      Policies:
      -
        PolicyName:
          Fn::Sub: ${AWS::StackName}-CodeBuildServiceRole-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "codebuild:CreateReportGroup"
              - "codebuild:CreateReport"
              - "codebuild:UpdateReport"
              - "codebuild:BatchPutTestCases"
            Resource:
              - "*"
          -
            Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
          -
            Effect: "Allow"
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:DeleteObject"
            - "s3:ListBucket"
            Resource:
            - Fn::Sub: arn:aws:s3:::${SiteS3Bucket}/*
            - Fn::Sub: arn:aws:s3:::${SiteS3Bucket}
            - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}/*
            - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}
          -
            Effect: "Allow"
            Action:
            - "iam:PassRole"
            Resource:
            - "*"

  #code build - api deployment using SAM (see buildspec.yml)
  WebsiteCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-site-build-project
      Description: CodeBuild Project to deploy the website
      ServiceRole: !GetAtt WebsiteDeployCodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type:  CODEPIPELINE
        BuildSpec: Site/buildspec.yml
      TimeoutInMinutes: 10

  WebsiteTestCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-WesbiteTestCodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "codebuild.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /service-role/
      Policies:
      -
        PolicyName:
          Fn::Sub: ${AWS::StackName}-CodeBuildServiceRole-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "codebuild:CreateReportGroup"
              - "codebuild:CreateReport"
              - "codebuild:UpdateReport"
              - "codebuild:BatchPutTestCases"
            Resource:
              - "*"
          -
            Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
          -
            Effect: "Allow"
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:DeleteObject"
            - "s3:ListBucket"
            Resource:
            - Fn::Sub: arn:aws:s3:::${SiteS3Bucket}/*
            - Fn::Sub: arn:aws:s3:::${SiteS3Bucket}
            - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}/*
            - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}
          -
                Effect: "Allow"
                Action:
                  - "devicefarm:*"
                Resource: "*"
          -
            Effect: "Allow"
            Action:
            - "iam:PassRole"
            Resource:
            - "*"
  
  TestSuiteCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-test-suite-build-project
      Description: CodeBuild Project to build the python test suite archive
      ServiceRole: !GetAtt WebsiteTestCodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type:  CODEPIPELINE
        BuildSpec: Tests/buildspec.yml
      TimeoutInMinutes: 10

  DeploymentPipelineTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      TopicName: !Join [ '', [ !Ref "AWS::StackName", '-', 'Alerts' ] ]

  ArtifactS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  ArtifactS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactS3Bucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${ArtifactS3Bucket}
              - !Sub arn:aws:s3:::${ArtifactS3Bucket}/*
            Principal:
              AWS:
                - !GetAtt CodePipelineRole.Arn
  
  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: MyGitHubConnection
      ProviderType: GitHub
  
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: "CodePipelineAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !GetAtt ArtifactS3Bucket.Arn
                  - !GetAtt SiteS3Bucket.Arn
                  - !Join ['',[!GetAtt ArtifactS3Bucket.Arn,'/*']]
                  - !Join ['',[!GetAtt SiteS3Bucket.Arn,'/*']]
              -
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref DeploymentPipelineTopic
              -
                Effect: "Allow"
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: 
                  - !GetAtt WebsiteCodeBuildProject.Arn
                  - !GetAtt TestSuiteCodeBuildProject.Arn
              -
                Effect: "Allow"
                Action:
                  - "codestar-connections:UseConnection"
                Resource: !Ref GitHubConnection
              -
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - "*"
  
  DeploymentPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "${AWS::StackName}-Pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactS3Bucket
      Stages:
        - Name: Source
          Actions:
          - Name: Source
            RunOrder: 1
            InputArtifacts: []
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: '1'
              Provider: CodeStarSourceConnection
            Configuration:
              ConnectionArn: !Ref GitHubConnection
              FullRepositoryId: !Ref GitHubRepositoryId
              BranchName: main
              DetectChanges: true
              OutputArtifactFormat: CODE_ZIP
            OutputArtifacts:
            - Name: SourceOutput
        - Name: DeployTest
          Actions:
          - Name: Deploy-to-S3-test
            RunOrder: 1
            InputArtifacts:
            - Name: SourceOutput
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref WebsiteCodeBuildProject
              EnvironmentVariables: !Join ['',['[{"name":"ENV","value":"test"},{"name":"S3_BUCKET","value":"',!Ref SiteS3Bucket,'"}]']]
            OutputArtifacts:
            - Name: DeployTestOutput
        - Name: TestSite
          Actions:
          - Name: test-suite-firefox
            InputArtifacts:
            - Name: SourceOutput
            ActionTypeId:
              Category: Test
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref TestSuiteCodeBuildProject
              EnvironmentVariables: !Join ['',['[{"name":"ENV","value":"test"},{"name":"BROWSER","value":"firefox"},{"name":"SITE_URL","value":"https://',!Ref SiteIPv4DnsRecord,'"},{"name":"DEVICE_POOL_ARN","value":"',!Ref DevicePoolArn,'"}]']]
            OutputArtifacts:
            - Name: TestSuiteFirefoxOutput
          - Name: test-suite-chrome
            InputArtifacts:
            - Name: SourceOutput
            ActionTypeId:
              Category: Test
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref TestSuiteCodeBuildProject
              EnvironmentVariables: !Join ['',['[{"name":"ENV","value":"test"},{"name":"BROWSER","value":"chrome"},{"name":"SITE_URL","value":"https://',!Ref SiteIPv4DnsRecord,'"},{"name":"DEVICE_POOL_ARN","value":"',!Ref DevicePoolArn,'"}]']]
            OutputArtifacts:
            - Name: TestSuiteChromeOutput
        - Name: DeployLive
          Actions:
          - Name: Deploy-to-S3-live
            RunOrder: 1
            InputArtifacts:
            - Name: SourceOutput
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref WebsiteCodeBuildProject
              EnvironmentVariables: !Join ['',['[{"name":"ENV","value":"live"},{"name":"S3_BUCKET","value":"',!Ref SiteS3Bucket,'"}]']]
            OutputArtifacts:
            - Name: BuildLiveOutput

Outputs:
  AssetS3BucketName:
    Value: !Ref ArtifactS3Bucket
    Description: Name of the S3 Asset Bucket
  SiteS3BucketName:
    Value: !Ref SiteS3Bucket
    Description: Name of S3 Site bucket
  SiteAddress:
    Value: !Join ['',['https://',!Ref SiteIPv4DnsRecord]]
    Description: Site Address
  
